<script type="text/javascript">
ui('Plugin', 'tutorials-plugin-nav')
</script>

<p>With a little work this could be made to interface with your station's web page or with cloud services.</p>

<pre>
#!/usr/bin/python

# IDJC DBus monitoring skeleton code.
# Can be started before or after IDJC and gracefully handles IDJC restarts.

# usage:
# for the default profile: ./plugin.py
# alternatively:
# ./plugin.py [profilename]
# ./plugin.py session.[sessionname]

import time
import sys

import dbus
from dbus.mainloop.glib import DBusGMainLoop
DBusGMainLoop(set_as_default=True)

import gobject
import glib
import psutil


class Plugin(object):
    def __init__(self, profile):
        self.profile = profile
        self.bus = dbus.SessionBus()
        self.watchdog_id = None
        self.watchdog_notice = False
        self.pid = 0
        self.start_probing()


    def main(self):
        glib.MainLoop().run()


    def start_probing(self):
        glib.timeout_add_seconds(2, self.idjc_started_probe)


    def idjc_started_probe(self):
        """Check for a newly started IDJC instance of the correct profile."""
        
        try:
            self.main = self.bus.get_object("net.sf.idjc." + self.profile,
                                                        "/net/sf/idjc/main")
            self.output = self.bus.get_object("net.sf.idjc." + self.profile,
                                                        "/net/sf/idjc/output")
            main_iface = dbus.Interface(self.main, "net.sf.idjc")
            main_iface.pid(reply_handler=self.pid_reply_handler,
                            error_handler=self.pid_error_handler)
        except dbus.exceptions.DBusException:
            # Keep searching periodically.
            return True
        else:
            return False


    def pid_reply_handler(self, value):
        self.pid = value
        print "found IDJC process with pid =", self.pid
        try:
            self.main.connect_to_signal("track_metadata_changed",
                                                        self.new_metadata)
            self.main.connect_to_signal("quitting", self.quit_handler)
            self.main.connect_to_signal("heartbeat", self.heartbeat_handler)
            self.output.connect_to_signal("streamstate_changed", self.new_streamstate)

            # Start watchdog thread.
            self.watchdog_id = glib.timeout_add_seconds(
                                                    3, self.watchdog)

            self.streams = {}
            output_iface = dbus.Interface(self.output, "net.sf.idjc")
            # Tell IDJC to initialize as empty its cache of sent data.
            # This yields a dump of server related info.
            output_iface.new_plugin_started()
        except dbus.exceptions.DBusException:
            self.start_probing()


    def pid_error_handler(self, error):
        print "error reading IDJC process ID"
        self.start_probing()


    def watchdog(self):
        if self.watchdog_notice:
            if psutil.pid_exists(self.pid):
                print "IDJC appears to be frozen"
                return True
            else:
                print "IDJC went away without saying goodbye"
                self.quit_handler()
                return False

        self.watchdog_notice = True
        return True


    def heartbeat_handler(self):
        """IDJC appears healthy, I guess."""
        
        print "heartbeat received"
        self.watchdog_notice = False


    def quit_handler(self):
        """Start scanning for a new bus object."""

        print "quit handler"
        if self.watchdog_id is not None:
            glib.source_remove(self.watchdog_id)
        self.start_probing()


    def new_metadata(self, artist, title, album, songname):
        """We got some new metadata.
        
        We must notify Twitter or something similar."""

        print "New metadata: %s, %s, %s" % (artist, title, album)
        if 0 in self.streams and self.streams[0][0]:
            stream = self.streams[0][1]
            print "Maybe would update Twitter account for this stream:", stream
            # ToDo: Potential Twitter update stuff.

        
    def new_streamstate(self, numeric_id, connected, where):
        print "New streamstate: %d %d %s" % (numeric_id ,connected, where)
        # Log state of the stream.
        self.streams[numeric_id] = (connected, where)
        # ToDo: Report the connection status.



def main():
    argv = sys.argv
    if len(argv) &lt;= 1:
        profile = "default"
    else:
        profile = argv[1]

    plugin = Plugin(profile)
    plugin.main()
    
    

if __name__ == "__main__":
    main()
</pre>
